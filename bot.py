"""
    Bot created for searching and getting updates about last-minute tours
    Works with PyTelegramBotApi, sqlite3
    Created by https://github.com/Polar1ty
"""

import config
import telebot
import datetime
import sqlite3 as sql
import dbworker
from telebot import types
import time
import inline_calendar
import random
from selenium import webdriver
import selenium


# connection = sql.connect('DATABASE.sqlite')
# q = connection.cursor()
# q.execute('''
# 			CREATE TABLE "user" (
# 				'id' TEXT,
# 				'country' TEXT,
# 				'city' TEXT,
# 				'date_from' TEXT,
# 				'nights' TEXT,
# 				'adults' TEXT,
# 				'childs' TEXT,
# 				'stars' TEXT,
# 				'cost' TEXT
# 			)''')
# connection.commit()
# q.close()
# connection.close()

def log(message):
    """ Logging user messages """
    print("<!--------------------------------!>")
    print(datetime.datetime.now())
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0} {1} (id = {2}) \n {3}".format(message.from_user.first_name,
                                                          message.from_user.last_name,
                                                          str(message.from_user.id), message.text))


def request_zaraz_travel(message):
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT * from user WHERE id='%s'" % message.from_user.id)
    results = q.fetchall()
    print(results)
    print(results[0][1].split(',')[1])
    print(results[0][2].split(',')[1])
    connection.commit()
    q.close()
    connection.close()
    driver = webdriver.Chrome('C:\\Users\Alexeii\PycharmProjects\ChromeDriver\chromedriver.exe')
    driver.get("https://zaraz.travel/")
    country_set = driver.find_element_by_xpath('//*[@id="ssam-theme-default-town-to-box"]')
    driver.execute_script(f"arguments[0].setAttribute('data-values','{results[0][1].split(',')[1]}')", country_set)  # set county code
    city = driver.find_element_by_xpath('//*[@id="ssam-theme-default-town-from-box"]')
    driver.execute_script(f"arguments[0].setAttribute('data-values','{results[0][2].split(',')[1]}')", city)  # set city code
    fromfrom = driver.find_element_by_xpath('//*[@id="ssam-theme-default-search-box"]/div[1]/input[1]')
    driver.execute_script(f"arguments[0].setAttribute('value','{results[0][3]}')", fromfrom)  # set fromfrom date
    fromto = driver.find_element_by_xpath('//*[@id="ssam-theme-default-search-box"]/div[1]/input[2]')
    driver.execute_script(f"arguments[0].setAttribute('value','{results[0][3]}')", fromto)  # set fromto date
    # --------------- #
    # Here should be set count of nights
    # --------------- #
    adults = driver.find_element_by_xpath('//*[@id="ssam-theme-default-search-box"]/div[1]/input[3]')
    driver.execute_script(f"arguments[0].setAttribute('value','{results[0][5]}')", adults)  # set count_of adults
    children = driver.find_element_by_xpath('//*[@id="ssam-theme-default-search-box"]/div[1]/input[4]')
    driver.execute_script(f"arguments[0].setAttribute('value','{results[0][6]}')", children)  # set count of children
    stars = driver.find_element_by_xpath('//*[@id="ssam-theme-default-category-box"]')
    driver.execute_script(f"arguments[0].setAttribute('data-values','{results[0][7]}')", stars)  # set count of stars
    driver.find_element_by_xpath('//*[@id="ssam-theme-default-search-box"]/div[5]/button').click()  # Press –®—É–∫–∞—Ç–∏
    time.sleep(6.5)
    # all_tours = driver.find_element_by_xpath('/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]') # work!
    print(driver.find_elements_by_xpath(
        '/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[1]/div/div/div[2]/div[3]/div[2]/a'))
    if driver.find_elements_by_xpath('/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[1]/div/div/div[2]/div[3]/div[2]/a') == []:
        print('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        all_tours = []
    else:
        all_tours = []
        for i in range(1, 27):
            try:
                url = driver.find_element_by_xpath(
                    f'/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[{i}]/div/div/div[2]/div[3]/div[2]/a').get_attribute(
                    "href")
                price = driver.find_element_by_xpath(
                    f'/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[{i}]/div/div/div[2]/div[3]/div[2]/a').text
                hotel = driver.find_element_by_xpath(
                    f'/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[{i}]/div/div/div[2]/div[1]/a/p').text
                date = driver.find_element_by_xpath(
                    f'/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[{i}]/div/div/div[2]/div[2]/div[2]/p[2]').text
                country = driver.find_element_by_xpath(
                    f'/html/body/main/section[2]/div/div/div[2]/div/div[2]/div[2]/div[2]/div/div/div[2]/div[{i}]/div/div/div[2]/div[3]/div[1]/p/span').text
                print(url)
                print(price)
                print(hotel)
                print(date)
                print(country)
                dict = {
                    'url': url,
                    'price': price,
                    'hotel': hotel,
                    'date': date,
                    'country': country
                }
                all_tours.append(dict)
            except selenium.common.exceptions.NoSuchElementException:
                pass
    print(all_tours)
    try:
        for i in range(1, 6):
            bot.send_message(message.chat.id, f'‚úà{all_tours[i]["country"]}\nüèù{all_tours[i]["hotel"]}\nüìÖ{all_tours[i]["date"]}\nüíµ<a href="{all_tours[i]["url"]}">{all_tours[i]["price"]}</a>', parse_mode='HTML')
    except IndexError:
        bot.send_message(message.chat.id, '–ü–æ –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ—ñ–≤ü§∑‚Äç\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µüîÅ\n–ù–∞–ø–∏—à—ñ—Ç—å /reset –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É')

        #  driver.quit()

def ask_from(message):
    button1 = types.KeyboardButton('üá∫üá¶–ö–∏—ó–≤')
    button2 = types.KeyboardButton('üá∫üá¶–ó–∞–ø–æ—Ä—ñ–∂–∂—è')
    button3 = types.KeyboardButton('üá∫üá¶–õ—å–≤—ñ–≤')
    button4 = types.KeyboardButton('üá∫üá¶–û–¥–µ—Å—Å–∞')
    button5 = types.KeyboardButton('üá∫üá¶–•–∞—Ä–∫—ñ–≤')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    markup.add(button1, button2, button3, button4, button5)
    bot.send_message(message.chat.id, '–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –≤–∏–ª—ñ—Ç—É:', reply_markup=markup)


def ask_when(message):
    bot.send_message(message.chat.id,
                     f'–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –±–∞–∂–∞–Ω—É –¥–∞—Ç—É –≤–∏–ª—ñ—Ç—ÉüìÖ')
    inline_calendar.init(message.chat.id,
                         datetime.date.today(),
                         datetime.date.today(),
                         datetime.date.today() + datetime.timedelta(days=365))
    bot.send_message(message.chat.id, text='–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ',
                     reply_markup=inline_calendar.get_keyboard(message.chat.id))


def count_of_child(message):
    button1 = types.KeyboardButton('üë∂')
    button2 = types.KeyboardButton('üë∂üë∂')
    button3 = types.KeyboardButton('üë∂üë∂üë∂')
    button4 = types.KeyboardButton('–ë–µ–∑ –¥—ñ—Ç–µ–π')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    markup.add(button1, button2, button3, button4)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ—Ç–µ–π:', reply_markup=markup)


def count_of_adult(message):
    button1 = types.KeyboardButton('üë§')
    button2 = types.KeyboardButton('üë§üë§')
    button3 = types.KeyboardButton('üë§üë§üë§')
    button4 = types.KeyboardButton('üë§üë§üë§üë§')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    markup.add(button1, button2, button3, button4)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Ä–æ—Å–ª–∏—Ö:', reply_markup=markup)


def child_age(message):
    button1 = types.KeyboardButton('2 —Ä–æ–∫–∏')
    button2 = types.KeyboardButton('3 —Ä–æ–∫–∏')
    button3 = types.KeyboardButton('4 —Ä–æ–∫–∏')
    button4 = types.KeyboardButton('5 —Ä–æ–∫—ñ–≤')
    button5 = types.KeyboardButton('6 —Ä–æ–∫—ñ–≤')
    button6 = types.KeyboardButton('7 —Ä–æ–∫—ñ–≤')
    button7 = types.KeyboardButton('8 —Ä–æ–∫—ñ–≤')
    button8 = types.KeyboardButton('9 —Ä–æ–∫—ñ–≤')
    button9 = types.KeyboardButton('10 —Ä–æ–∫—ñ–≤')
    button10 = types.KeyboardButton('11 —Ä–æ–∫—ñ–≤')
    button11 = types.KeyboardButton('12 —Ä–æ–∫—ñ–≤')
    button12 = types.KeyboardButton('13 —Ä–æ–∫—ñ–≤')
    button13 = types.KeyboardButton('14 —Ä–æ–∫—ñ–≤')
    button14 = types.KeyboardButton('15 —Ä–æ–∫—ñ–≤')
    button15 = types.KeyboardButton('16 —Ä–æ–∫—ñ–≤')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11,
               button12, button13, button14, button15)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏:', reply_markup=markup)


def hotel_stars(message):
    button1 = types.KeyboardButton('‚≠ê‚≠ê')
    button2 = types.KeyboardButton('‚≠ê‚≠ê‚≠ê')
    button3 = types.KeyboardButton('‚≠ê‚≠ê‚≠ê‚≠ê')
    button4 = types.KeyboardButton('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    markup.add(button1, button2, button3, button4)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫ –≥–æ—Ç–µ–ª—éüè®', reply_markup=markup)


def expected_cost(message):
    button1 = types.KeyboardButton('üíµ0-300$')
    button2 = types.KeyboardButton('üíµ300-600$')
    button3 = types.KeyboardButton('üíµ600-900$')
    button4 = types.KeyboardButton('üíµ900-1200$')
    button5 = types.KeyboardButton('üíµ1200-1500$')
    button6 = types.KeyboardButton('üíµ–í—ñ–¥ 1500$')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    markup.add(button1, button2, button3, button4, button5, button6)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—É—Ä—Éüí∏', reply_markup=markup)


# creating our bot
bot = telebot.TeleBot(config.TOKEN)


@bot.callback_query_handler(func=inline_calendar.is_inline_calendar_callbackquery)
def calendar_callback_handler(q: types.CallbackQuery):
    """ Handle all inline calendars """
    bot.answer_callback_query(q.id)
    try:
        return_data = inline_calendar.handler_callback(q.from_user.id, q.data)
        if return_data is None:
            bot.edit_message_reply_markup(chat_id=q.from_user.id, message_id=q.message.message_id,
                                          reply_markup=inline_calendar.get_keyboard(q.from_user.id))
        else:
            picked_data = return_data
            bot.edit_message_text(text=f'–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {picked_data}', chat_id=q.from_user.id,
                                  message_id=q.message.message_id,
                                  reply_markup=inline_calendar.get_keyboard(q.from_user.id))
            connection = sql.connect('DATABASE.sqlite')
            q1 = connection.cursor()
            db_picked_data = str(str(picked_data).split('-')[2]) + '.' + str(str(picked_data).split('-')[1]) + '.' + str(str(picked_data).split('-')[0])
            print(db_picked_data)
            q1.execute("UPDATE user SET date_from='%s' WHERE id='%s'" % (db_picked_data, q.from_user.id))
            connection.commit()
            q1.close()
            connection.close()
            button1 = types.KeyboardButton('–í—ñ–¥ 1üåô')
            button2 = types.KeyboardButton('–í—ñ–¥ 3üåô')
            button3 = types.KeyboardButton('–í—ñ–¥ 5üåô')
            button4 = types.KeyboardButton('–í—ñ–¥ 7üåô')
            button5 = types.KeyboardButton('–í—ñ–¥ 9üåô')
            button6 = types.KeyboardButton('–í—ñ–¥ 11üåô')
            button7 = types.KeyboardButton('–í—ñ–¥ 14üåô')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(button1, button2, button3, button4, button5, button6, button7)
            bot.send_message(q.from_user.id, '–ó–∞–ø–∞–º\'—è—Ç–∞—é, –æ–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ—á–µ–πüåô', reply_markup=markup)
    except inline_calendar.WrongChoiceCallbackException:
        bot.edit_message_text(text=f'–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä', chat_id=q.from_user.id, message_id=q.message.message_id,
                              reply_markup=inline_calendar.get_keyboard(q.from_user.id))


@bot.message_handler(commands=['reset'])
def reset(message):
    """ Clear all unnecessary data from utility dict """
    log(message)
    bot.send_message(message.chat.id, '–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è. –ù–∞–ø–∏—à—ñ—Ç—å /start')


@bot.message_handler(commands=['help'])
def help(message):
    """ Directs user into getting help msg func """
    log(message)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, –≤–æ–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.')


@bot.message_handler(commands=['rules'])
def rules(message):
    """ Here should be rules for using the bot """
    log(message)
    bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')


@bot.message_handler(commands=['start'])
def start(message):
    log(message)
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("SELECT EXISTS(SELECT 1 FROM user WHERE id='%s')" % message.from_user.id)
    results1 = q.fetchone()
    if results1[0] != 1:
        q.execute("INSERT INTO 'user' (id) VALUES ('%s')" % message.from_user.id)
    connection.commit()
    q.close()
    connection.close()
    bot.send_chat_action(message.chat.id, action='typing')
    time.sleep(1)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
    button1 = types.KeyboardButton('üá¶üáø–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω')
    button2 = types.KeyboardButton('üá¶üá±–ê–ª–±–∞–Ω–∏—è')
    button3 = types.KeyboardButton('üáßüá¨–ë–æ–ª–≥–∞—Ä–∏—è')
    button4 = types.KeyboardButton('üá¨üá∑–ì—Ä–µ—Ü–∏—è')
    button5 = types.KeyboardButton('üá¨üá™–ì—Ä—É–∑–∏—è')
    button6 = types.KeyboardButton('üá©üá¥–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞')
    button7 = types.KeyboardButton('üá™üá¨–ï–≥–∏–ø–µ—Ç')
    button8 = types.KeyboardButton('üáÆüá±–ò–∑—Ä–∞–∏–ª—å')
    button9 = types.KeyboardButton('üáÆüá©–ò–Ω–¥–æ–Ω–µ–∑–∏—è')
    button10 = types.KeyboardButton('üá™üá∏–ò—Å–ø–∞–Ω–∏—è')
    button11 = types.KeyboardButton('üáÆüáπ–ò—Ç–∞–ª–∏—è')
    button12 = types.KeyboardButton('üá®üáæ–ö–∏–ø—Ä')
    button13 = types.KeyboardButton('üá®üá≥–ö–∏—Ç–∞–π')
    button14 = types.KeyboardButton('üá®üá∫–ö—É–±–∞')
    button15 = types.KeyboardButton('üá≤üáæ–ú–∞–ª–∞–π–∑–∏—è')
    button16 = types.KeyboardButton('üá≤üáª–ú–∞–ª—å–¥–∏–≤—ã')
    button17 = types.KeyboardButton('üá≤üá¶–ú–∞—Ä–æ–∫–∫–æ')
    button18 = types.KeyboardButton('üá¶üá™–û–ê–≠')
    button19 = types.KeyboardButton('üá¥üá≤–û–º–∞–Ω')
    button20 = types.KeyboardButton('üáµüáπ–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è')
    button21 = types.KeyboardButton('üáπüá≠–¢–∞–∏–ª–∞–Ω–¥')
    button22 = types.KeyboardButton('üáπüá≥–¢—É–Ω–∏—Å')
    button23 = types.KeyboardButton('üáπüá∑–¢—É—Ä—Ü–∏—è')
    button24 = types.KeyboardButton('üá≠üá∑–•–æ—Ä–≤–∞—Ç–∏—è')
    button25 = types.KeyboardButton('üá±üá∞–®—Ä–∏-–õ–∞–Ω–∫–∞')
    markup.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11,
               button12, button13, button14, button15, button16, button17, button18, button19, button20, button21,
               button22, button23, button24, button25)
    bot.send_message(message.chat.id,
                     '–î–æ–±—Ä–∏–¥–µ–Ω—å {0.first_name}, –≤–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–¥–æ—Ä–æ–∂–µ–π-{1.first_name}‚úàüèù\n–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—Éüëá'.format(
                         message.from_user, bot.get_me()), reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üá¶üáø–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},2000000087', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá¶üá±–ê–ª–±–∞–Ω–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},2000000115', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáßüá¨–ë–æ–ª–≥–∞—Ä–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},35', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá¨üá∑–ì—Ä–µ—Ü–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},10', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá¨üá™–ì—Ä—É–∑–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},151', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá©üá¥–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},42', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá™üá¨–ï–≥–∏–ø–µ—Ç')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},3', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáÆüá±–ò–∑—Ä–∞–∏–ª—å')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},80', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáÆüá©–ò–Ω–¥–æ–Ω–µ–∑–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},59', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá™üá∏–ò—Å–ø–∞–Ω–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},18', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáÆüáπ–ò—Ç–∞–ª–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},6', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá®üáæ–ö–∏–ø—Ä')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},16', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá®üá≥–ö–∏—Ç–∞–π')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},99', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá®üá∫–ö—É–±–∞')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},76', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá≤üáæ–ú–∞–ª–∞–π–∑–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},69', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá≤üáª–ú–∞–ª—å–¥–∏–≤—ã')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},73', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá≤üá¶–ú–∞—Ä–æ–∫–∫–æ')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},86', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá¶üá™–û–ê–≠')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},20', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá¥üá≤–û–º–∞–Ω')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},94', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáµüáπ–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},81', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáπüá≠–¢–∞–∏–ª–∞–Ω–¥')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},12', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáπüá≥–¢—É–Ω–∏—Å')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},15', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üáπüá∑–¢—É—Ä—Ü–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},5', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá≠üá∑–•–æ—Ä–≤–∞—Ç–∏—è')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},8', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá±üá∞–®—Ä–∏-–õ–∞–Ω–∫–∞')
def send_calendar(message):
    log(message)
    country = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET country='%s' WHERE id='%s'" % (f'{country[2:]},116', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_from(message)


@bot.message_handler(func=lambda message: message.text == 'üá∫üá¶–ö–∏—ó–≤')
def ask_date_from(message):
    log(message)
    city = message.text
    print(city[2:])
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET city='%s' WHERE id='%s'" % (f'{city[2:]},149', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_when(message)


@bot.message_handler(func=lambda message: message.text == 'üá∫üá¶–ó–∞–ø–æ—Ä—ñ–∂–∂—è')
def ask_date_from(message):
    log(message)
    city = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET city='%s' WHERE id='%s'" % (f'{city[2:]},648', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_when(message)


@bot.message_handler(func=lambda message: message.text == 'üá∫üá¶–õ—å–≤—ñ–≤')
def ask_date_from(message):
    log(message)
    city = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET city='%s' WHERE id='%s'" % (f'{city[2:]},534', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_when(message)


@bot.message_handler(func=lambda message: message.text == 'üá∫üá¶–û–¥–µ—Å—Å–∞')
def ask_date_from(message):
    log(message)
    city = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET city='%s' WHERE id='%s'" % (f'{city[2:]},532', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_when(message)


@bot.message_handler(func=lambda message: message.text == 'üá∫üá¶–•–∞—Ä–∫—ñ–≤')
def ask_date_from(message):
    log(message)
    city = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET city='%s' WHERE id='%s'" % (f'{city[2:]},146', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    ask_when(message)


@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥ 1üåô')
def ask_count_adult(message):
    log(message)
    nights = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET nights='%s' WHERE id='%s'" % (nights[4], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_adult(message)


@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥ 3üåô')
def ask_count_adult(message):
    log(message)
    nights = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET nights='%s' WHERE id='%s'" % (nights[4], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_adult(message)


@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥ 5üåô')
def ask_count_adult(message):
    log(message)
    nights = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET nights='%s' WHERE id='%s'" % (nights[4], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_adult(message)


@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥ 7üåô')
def ask_count_adult(message):
    log(message)
    nights = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET nights='%s' WHERE id='%s'" % (nights[4], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_adult(message)


@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥ 9üåô')
def ask_count_adult(message):
    log(message)
    nights = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET nights='%s' WHERE id='%s'" % (nights[4], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_adult(message)


@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥ 11üåô')
def ask_count_adult(message):
    log(message)
    nights = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET nights='%s' WHERE id='%s'" % (nights[4], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_adult(message)


@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥ 14üåô')
def ask_count_adult(message):
    log(message)
    nights = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET nights='%s' WHERE id='%s'" % (nights[4], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_adult(message)


@bot.message_handler(func=lambda message: message.text == 'üë§')
def ask_count_child(message):
    log(message)
    adults = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET adults='%s' WHERE id='%s'" % (len(adults), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_child(message)


@bot.message_handler(func=lambda message: message.text == 'üë§üë§')
def ask_count_child(message):
    log(message)
    adults = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET adults='%s' WHERE id='%s'" % (len(adults), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_child(message)


@bot.message_handler(func=lambda message: message.text == 'üë§üë§üë§')
def ask_count_child(message):
    log(message)
    adults = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET adults='%s' WHERE id='%s'" % (len(adults), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_child(message)


@bot.message_handler(func=lambda message: message.text == 'üë§üë§üë§üë§')
def ask_count_child(message):
    log(message)
    adults = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET adults='%s' WHERE id='%s'" % (len(adults), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    count_of_child(message)


@bot.message_handler(func=lambda message: message.text == 'üë∂')
def ask_child_age(message):
    log(message)
    childs = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET childs='%s' WHERE id='%s'" % (len(childs), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    child_age(message)


@bot.message_handler(func=lambda message: message.text == 'üë∂üë∂')
def ask_child_age(message):
    log(message)
    childs = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET childs='%s' WHERE id='%s'" % (len(childs), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    child_age(message)
    # TODO: –ü—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤


@bot.message_handler(func=lambda message: message.text == 'üë∂üë∂üë∂')
def ask_child_age(message):
    log(message)
    childs = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET childs='%s' WHERE id='%s'" % (len(childs), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    child_age(message)


@bot.message_handler(func=lambda message: message.text == '–ë–µ–∑ –¥—ñ—Ç–µ–π')
def ask_child_age(message):
    log(message)
    childs = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET childs='%s' WHERE id='%s'" % ('0', message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    hotel_stars(message)


@bot.message_handler(func=lambda message: message.text == '‚≠ê‚≠ê')
def get_stars(message):
    log(message)
    stars = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET stars='%s' WHERE id='%s'" % (len(stars), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    expected_cost(message)


@bot.message_handler(func=lambda message: message.text == '‚≠ê‚≠ê‚≠ê')
def get_stars(message):
    log(message)
    stars = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET stars='%s' WHERE id='%s'" % (len(stars), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    expected_cost(message)


@bot.message_handler(func=lambda message: message.text == '‚≠ê‚≠ê‚≠ê‚≠ê')
def get_stars(message):
    log(message)
    stars = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET stars='%s' WHERE id='%s'" % (len(stars), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    expected_cost(message)


@bot.message_handler(func=lambda message: message.text == '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')
def get_stars(message):
    log(message)
    stars = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET stars='%s' WHERE id='%s'" % (len(stars), message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    expected_cost(message)


@bot.message_handler(func=lambda message: message.text == 'üíµ0-300$')
def get_cost(message):
    log(message)
    bot.send_message(message.chat.id, '–§–æ—Ä–º—É—î–º–æ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—ñ–¥–±—ñ—Ä–∫—Éüì†\n–ó–∞—á–µ–∫–∞–π—Ç–µ‚è≥')
    cost = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET cost='%s' WHERE id='%s'" % (cost[1:-1], message.from_user.id))
    connection.commit()
    q.close()
    connection.close()
    request_zaraz_travel(message)


@bot.message_handler(func=lambda message: message.text == 'üíµ300-600$')
def get_cost(message):
    log(message)
    bot.send_message(message.chat.id, '–§–æ—Ä–º—É—î–º–æ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—ñ–¥–±—ñ—Ä–∫—Éüì†\n–ó–∞—á–µ–∫–∞–π—Ç–µ‚è≥')
    cost = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET cost='%s' WHERE id='%s'" % (cost[1:-1], message.from_user.id))
    connection.commit()
    q.close()
    request_zaraz_travel(message)


@bot.message_handler(func=lambda message: message.text == 'üíµ600-900$')
def get_cost(message):
    log(message)
    bot.send_message(message.chat.id, '–§–æ—Ä–º—É—î–º–æ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—ñ–¥–±—ñ—Ä–∫—Éüì†\n–ó–∞—á–µ–∫–∞–π—Ç–µ‚è≥')
    cost = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET cost='%s' WHERE id='%s'" % (cost[1:-1], message.from_user.id))
    connection.commit()
    q.close()
    request_zaraz_travel(message)


@bot.message_handler(func=lambda message: message.text == 'üíµ900-1200$')
def get_cost(message):
    log(message)
    bot.send_message(message.chat.id, '–§–æ—Ä–º—É—î–º–æ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—ñ–¥–±—ñ—Ä–∫—Éüì†\n–ó–∞—á–µ–∫–∞–π—Ç–µ‚è≥')
    cost = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET cost='%s' WHERE id='%s'" % (cost[1:-1], message.from_user.id))
    connection.commit()
    q.close()
    request_zaraz_travel(message)


@bot.message_handler(func=lambda message: message.text == 'üíµ1200-1500$')
def get_cost(message):
    log(message)
    bot.send_message(message.chat.id, '–§–æ—Ä–º—É—î–º–æ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—ñ–¥–±—ñ—Ä–∫—Éüì†\n–ó–∞—á–µ–∫–∞–π—Ç–µ‚è≥')
    cost = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET cost='%s' WHERE id='%s'" % (cost[1:-1], message.from_user.id))
    connection.commit()
    q.close()
    request_zaraz_travel(message)


@bot.message_handler(func=lambda message: message.text == 'üíµ–í—ñ–¥ 1500$')
def get_cost(message):
    log(message)
    bot.send_message(message.chat.id, '–§–æ—Ä–º—É—î–º–æ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—ñ–¥–±—ñ—Ä–∫—Éüì†\n–ó–∞—á–µ–∫–∞–π—Ç–µ‚è≥')
    cost = message.text
    connection = sql.connect('DATABASE.sqlite')
    q = connection.cursor()
    q.execute("UPDATE user SET cost='%s' WHERE id='%s'" % (cost[5:-1], message.from_user.id))
    connection.commit()
    q.close()
    request_zaraz_travel(message)


# BOT RUNNING
if __name__ == '__main__':
    bot.polling(none_stop=True)
